@page "/geolocation"

@inject IGeolocationService Geolocation

<PageTitle>Geolocation</PageTitle>
<h1>
    Geolocation
    @if (_isLoading)
    {
        <span class="spinner-border text-primary" style="border-width: .12em;" role="status">
            <span class="visually-hidden">Loading...</span>
        </span>
    }
    @if (_position is not null)
    {
        <span>: 
            <code>
                @(_position.TimestampAsUtcDateTime.ToLocalTime().ToString())
            </code>
        </span>
    }
</h1>

@{
    var (bgClass, json) = (_position, _positionError) switch
    {
        (null, { }) => ("bg-danger", _positionError.ToJson(_opts)),
        ({ }, null) => ("bg-dark", _position.ToJson(_opts)),
        _ => ("", null)
    };
    if (bgClass is not "" && json is not null)
    {
        <pre class="@bgClass text-light fs-4 p-4"> 
            <code>@json</code>
        </pre>
    }
}

@code {
    readonly JsonSerializerOptions _opts = new()
    {
        WriteIndented = true,
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
    };
    readonly PositionOptions _options = new()
    {
        EnableHighAccuracy = true,
        MaximumAge = 0,
        Timeout = 15_000
    };

    GeolocationPosition? _position;
    GeolocationPositionError? _positionError;
    bool _isLoading = true;

    protected override void OnInitialized() =>
        Geolocation.GetCurrentPosition(
            component: this,
            onSuccessCallbackMethodName: nameof(OnPositionRecieved),
            onErrorCallbackMethodName: nameof(OnPositionError),
            options: _options);

    [JSInvokable]
    public void OnPositionRecieved(GeolocationPosition position)
    {
        _isLoading = false;
        _position = position;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnPositionError(GeolocationPositionError positionError)
    {
        _isLoading = false;
        _positionError = positionError;
        StateHasChanged();
    }
}
